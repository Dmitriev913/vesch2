import cv2
import mediapipe as mp
import pyautogui
import time

print("—Ç—É—Ç —á–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
hands = mp_hands.Hands(
    max_num_hands=2,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.5
)

screen_w, screen_h = pyautogui.size()
print(f"üì∫ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: {screen_w}x{screen_h}")

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("–≤—Å–µ —Ö—Ä–µ–Ω—å –≤–∞—Å—è")
    exit()

print("üìπ –∫–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—Ç—å")
print("üéÆ –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –ñ–ï–°–¢–ê–ú:")
print("   –õ–ï–í–ê–Ø –†–£–ö–ê:")
print("   üëÜ –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü - –î–í–ò–ñ–ï–ù–ò–ï –ö–£–†–°–û–†–ê")
print("   ü§ò –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π+–º–∏–∑–∏–Ω–µ—Ü - –ü–†–ê–í–ê–Ø –ö–ù–û–ü–ö–ê")
print("   üëÜüëÜ –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π+—Å—Ä–µ–¥–Ω–∏–π - –õ–ï–í–´–ô –ö–õ–ò–ö (–±–µ–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)")
print("   –ü–†–ê–í–ê–Ø –†–£–ö–ê:")
print("   ‚úä –ö—É–ª–∞–∫ - –°–£–ü–ï–† –ë–´–°–¢–†–ê–Ø –ü–†–û–ö–†–£–¢–ö–ê")
print("   üö™ –ù–∞–∂–º–∏—Ç–µ 'Q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
last_click_time = 0
last_right_click_time = 0
last_scroll_time = 0
scroll_mode = False
last_scroll_y = None


def is_left_hand(hand_landmarks):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–µ–≤–æ–π —Ä—É–∫–∏"""
    wrist = hand_landmarks.landmark[0]
    pinky_mcp = hand_landmarks.landmark[17]
    return pinky_mcp.x > wrist.x


def is_right_hand(hand_landmarks):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏"""
    return not is_left_hand(hand_landmarks)


def is_fist(landmarks):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∞ –∫—É–ª–∞–∫–∞"""
    tips = [8, 12, 16, 20]
    pips = [6, 10, 14, 18]

    fingers_bent = 0
    for tip, pip in zip(tips, pips):
        if landmarks[tip].y > landmarks[pip].y:
            fingers_bent += 1

    return fingers_bent >= 3


def is_two_fingers(landmarks):
    """–ñ–µ—Å—Ç –¥–≤—É—Ö –ø–∞–ª—å—Ü–µ–≤ """
    index_extended = landmarks[8].y < landmarks[6].y
    middle_extended = landmarks[12].y < landmarks[10].y
    ring_bent = landmarks[16].y > landmarks[14].y
    pinky_bent = landmarks[20].y > landmarks[18].y
    return index_extended and middle_extended and ring_bent and pinky_bent


def is_right_click_gesture(landmarks):
    """–ñ–µ—Å—Ç –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ """
    index_extended = landmarks[8].y < landmarks[6].y
    pinky_extended = landmarks[20].y < landmarks[18].y
    middle_bent = landmarks[12].y > landmarks[10].y
    ring_bent = landmarks[16].y > landmarks[14].y
    return index_extended and pinky_extended and middle_bent and ring_bent


def is_pointing_gesture(landmarks):
    """–ñ–µ—Å—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞"""
    index_extended = landmarks[8].y < landmarks[6].y
    middle_bent = landmarks[12].y > landmarks[10].y
    ring_bent = landmarks[16].y > landmarks[14].y
    pinky_bent = landmarks[20].y > landmarks[18].y
    return index_extended and middle_bent and ring_bent and pinky_bent


def handle_scroll(current_y):
    """–ö—Ä—É—Ç–∏—Å—å —à–∞–π—Ç–∞–Ω"""
    global last_scroll_y, last_scroll_time

    current_time = time.time()


    if last_scroll_y is None:
        last_scroll_y = current_y
        return


    delta_y = last_scroll_y - current_y


    if abs(delta_y) > 0.001:

        scroll_amount = int(delta_y * 800)


        if current_time - last_scroll_time > 0.03:
            pyautogui.scroll(scroll_amount)
            print(f"üöÄ –ü–†–û–ö–†–£–¢–ö–ê: {scroll_amount}")
            last_scroll_time = current_time


    last_scroll_y = current_y


try:
    while True:
        success, img = cap.read()
        if not success:
            break


        img = cv2.flip(img, 1)
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = hands.process(img_rgb)

        current_time = time.time()
        left_hand_detected = False
        right_hand_detected = False

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∂–µ—Å—Ç—ã
        left_gesture = "–ù–µ—Ç"
        right_gesture = "–ù–µ—Ç"

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                landmarks = hand_landmarks.landmark


                if is_left_hand(hand_landmarks):
                    left_hand_detected = True
                    mp_drawing.draw_landmarks(
                        img, hand_landmarks, mp_hands.HAND_CONNECTIONS,
                        mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2),
                        mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)
                    )


                    index_tip = landmarks[8]
                    cursor_x = int(index_tip.x * screen_w)
                    cursor_y = int(index_tip.y * screen_h)


                    if is_right_click_gesture(landmarks):
                        left_gesture = "–ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞"
                        if current_time - last_right_click_time > 0.5:
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –¥–µ–ª–∞–µ–º –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫
                            pyautogui.moveTo(cursor_x, cursor_y)
                            pyautogui.rightClick()
                            print("–ø—Ä–∞–≤–æ")
                            last_right_click_time = current_time

                    elif is_two_fingers(landmarks):
                        left_gesture = "–õ–µ–≤—ã–π –∫–ª–∏–∫"
                        if current_time - last_click_time > 0.5:
                            # –¢–û–õ–¨–ö–û –ö–õ–ò–ö –ë–ï–ó –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø –ö–£–†–°–û–†–ê
                            pyautogui.click()
                            print("üëÜüëÜ –õ–µ–≤—ã–π –∫–ª–∏–∫ (–±–µ–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)")
                            last_click_time = current_time

                    elif is_pointing_gesture(landmarks):
                        left_gesture = "–î–≤–∏–∂–µ–Ω–∏–µ"

                        pyautogui.moveTo(cursor_x, cursor_y)

                elif is_right_hand(hand_landmarks):
                    right_hand_detected = True
                    mp_drawing.draw_landmarks(
                        img, hand_landmarks, mp_hands.HAND_CONNECTIONS,
                        mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2),
                        mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2)
                    )


                    middle_tip_y = landmarks[12].y


                    if is_fist(landmarks):
                        right_gesture = "üöÄ –ë–∏—Å—Ç—Ä–æ"
                        scroll_mode = True
                        handle_scroll(middle_tip_y)
                    else:
                        right_gesture = "–ù–µ—Ç"
                        scroll_mode = False
                        last_scroll_y = None


        if not right_hand_detected:
            scroll_mode = False
            last_scroll_y = None


        cv2.putText(img, f"–õ–ï–í–ê–Ø: {left_gesture}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        cv2.putText(img, f"–ü–†–ê–í–ê–Ø: {right_gesture}", (10, 70),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)


        scroll_status = "üöÄ –ê–ö–¢–ò–í–ù–ê" if scroll_mode else "–í–´–ö–õ"
        scroll_color = (0, 255, 255) if scroll_mode else (0, 0, 255)
        cv2.putText(img, f"–ü–†–û–ö–†–£–¢–ö–ê: {scroll_status}", (10, 110),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, scroll_color, 2)


        if scroll_mode:
            cv2.putText(img, "–î–≤–∏–≥–∞–π—Ç–µ —Ä—É–∫–æ–π –í–í–ï–†–•/–í–ù–ò–ó –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏", (10, 140),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

        cv2.imshow('Gesture Control - –°–£–ü–ï–† –ë–´–°–¢–†–ê–Ø –ü–†–û–ö–†–£–¢–ö–ê', img)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback

    traceback.print_exc()

finally:
    cap.release()
    cv2.destroyAllWindows()
    print("–ø—è—Ç–Ω–∏—Ü–∞")